{"version":3,"sources":["actions/index.js","components/common/PostCard/PostCard.js","components/common/LikeButton/LikeButton.js","components/common/BookmarkButton/BookmarkButton.js","containers/item/PostCardContainer.js","components/common/PostCardList/PostCardList.js","containers/list/RecentPostCardList.js","pages/Recent.js","components/App.js","reducers/postList.js","lib/api/posts/index.js","reducers/filter.js","reducers/index.js","store/index.js","Root.js","serviceWorker.js","index.js"],"names":["GET_POST_LIST","RECEIVE_POST_LIST","SET_POST_LIST","ADD_POST","TOGGLE_LIKE","TOGGLE_BOOKMARK","SET_FILTER","GET_FILTERED_LIST","filters","addPost","postItem","type","toggleLike","postId","toggleBookmark","PostCard","props","react_default","a","createElement","className","href","style","backgroundImage","concat","imgSrc","title","buttons","LikeButton","console","log","isLiked","onClick","dispatch","ti","connect","BookmarkButton","isBookmark","md","PostCardContainer","postInfo","common_PostCard_PostCard","key","Date","getTime","common_LikeButton_LikeButton","common_BookmarkButton_BookmarkButton","PostCardList","id","postList","map","index","item_PostCardContainer","RecentPostCardList","this","getPostList","common_PostCardList_PostCardList","Component","state","Recent","setPostList","isFetching","App","Switch","Route","exact","path","component","arguments","length","undefined","action","Object","toConsumableArray","viewCount","objectSpread","filter","combineReducers","store","createStore","reducers","Root","es","BrowserRouter","components_App","Boolean","window","location","hostname","match","ReactDOM","render","src_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80c6bf49.chunk.js","sourcesContent":["/*\n * action types\n */\nexport const GET_POST_LIST = 'GET_POST_LIST';\nexport const RECEIVE_POST_LIST = 'RECEIVE_POST_LIST';\nexport const SET_POST_LIST = 'SET_POST_LIST';\nexport const ADD_POST = 'ADD_POST';\nexport const TOGGLE_LIKE = 'TOGGLE_LIKE';\nexport const TOGGLE_BOOKMARK = 'TOGGLE_BOOKMARK';\nexport const SET_FILTER = 'SET_FILTER';\nexport const GET_FILTERED_LIST = 'GET_FILTERED_LIST';\n\nexport const filters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_POPULAR: 'SHOW_POPULAR',\n    SHOW_BOOKMARKED: 'SHOW_BOOKMARKED'\n}\n\n/*\n * action creators\n */\n\nexport function setPostList(postList) {\n    return { type: SET_POST_LIST, postList }\n}\n\nexport function getPostList() {\n    return { type: GET_POST_LIST, isFetching: true }\n}\n\nexport function receivePostList(res) {\n  return { type: RECEIVE_POST_LIST, isFetching: false, postList: res.postList }\n}\n\nexport function addPost(postItem) {\n    return { type: ADD_POST, postItem }\n}\n\nexport function toggleLike(postId) {\n  return { type: TOGGLE_LIKE, postId }\n}\n\nexport function toggleBookmark(postId) {\n  return { type: TOGGLE_BOOKMARK, postId }\n}\n\nexport function setFilter(filter) {\n    return { type: SET_FILTER, filter }\n}\n\nexport function getFilteredList(postList, filter) {\n    return { type: GET_FILTERED_LIST, postList: filterPostList(postList, filter) }\n}\n\n\nfunction filterPostList(postList, filter) {\n  if(filter === 'SHOW_ALL' ) {\n    return  postList;\n  } else if(filter === 'SHOW_POPULAR') {\n    return  postList.filter(post=>post.isLiked);\n  } else if( filter === 'SHOW_BOOKMARKED') {\n    return postList.filter(post => post.isBookmark);\n  } else {\n    return postList;\n  }\n}","// @flow\nimport React from 'react';\nimport './PostCard.scss';\n\ntype Props = {\n    imgSrc: string;\n    title: string;\n}\n\nconst PostCard = (props: Props) => {\n    return (\n        <div className=\"PostCard\">\n        {/* <div className=\"image\">\n            <img src={props.imgSrc} alt={props.title}></img>\n        </div> */}\n        <a className=\"card-image\" href=\"bookmark\">\n            <div className=\"image\" style={{'backgroundImage':`url(${props.imgSrc})`}}></div>\n        </a>\n        <div className=\"title\">\n            {props.title}\n        </div>\n        <div className=\"buttons\">\n            {props.buttons}\n        </div>\n        \n        </div>\n    )\n}\n\nexport default PostCard;","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './LikeButton.scss';\nimport { TiHeartOutline, TiHeartFullOutline } from 'react-icons/ti';\nimport { toggleLike } from '../../../actions';\n\ntype Props = {\n    postId: number;\n    isLiked: boolean;\n}\n\nlet LikeButton = (props: Props) => {\n    console.log(props)\n    if(props.isLiked) {\n        return (<span className=\"clicked\" onClick={()=>{props.dispatch(toggleLike(props.postId))}}><TiHeartFullOutline/></span>)\n    } else {\n        return (<span className=\"unclicked\" onClick={()=>{props.dispatch(toggleLike(props.postId))}}><TiHeartOutline/></span>)\n    }\n}\n\nLikeButton = connect()(LikeButton)\nexport default LikeButton;","// @flow\nimport React from 'react';\nimport './BookmarkButton.scss';\nimport { MdBookmark, MdBookmarkBorder } from 'react-icons/md';\nimport { connect } from 'react-redux';\nimport { toggleBookmark } from '../../../actions';\n\ntype Props = {\n    postId: number;\n    isBookmark: boolean;\n}\n\nlet BookmarkButton = (props: Props) => {\n    if(props.isBookmark) {\n        return (<span className=\"clicked\" onClick={()=>{props.dispatch(toggleBookmark(props.postId))}}><MdBookmark/></span>)\n    } else {\n        return (<span className=\"unclicked\" onClick={()=>{props.dispatch(toggleBookmark(props.postId))}}><MdBookmarkBorder/></span>)\n    }\n}\nBookmarkButton = connect()(BookmarkButton)\nexport default BookmarkButton;","// flow\nimport React from 'react';\nimport PostCard from '../../components/common/PostCard';\nimport LikeButton from '../../components/common/LikeButton';\nimport BookmarkButton from '../../components/common/BookmarkButton';\ntype Props = {\n}\n\nconst PostCardContainer  = (props: Props) => {\n    const { postInfo } = props;\n    return (\n        <PostCard\n            key={new Date().getTime()}\n            imgSrc={postInfo.imgSrc}\n            title={postInfo.title}\n            buttons={[<LikeButton key={`${new Date().getTime()}-like`} isLiked={postInfo.isLiked} postId={postInfo.postId}/>, <BookmarkButton key={`${new Date().getTime()}-bookmark`} isBookmark={postInfo.isBookmark} postId={postInfo.postId}/>]}\n        /> \n    )\n}\n\nexport default PostCardContainer;","// @flow\nimport React from 'react';\nimport './PostCardList.scss';\nimport PostCardContainer from '../../../containers/item/PostCardContainer';\ntype Props = {\n\n}\n\nconst PostCardList = (props: Props) => {\n    console.log('PostCardList', props)\n    \n    return (\n    <div id=\"PostCardList\">\n        <div className=\"post-card-list\">\n        {\n            props.postList.map((postItem, index) => {\n                return <PostCardContainer key={`${postItem.title}-${index}`} postInfo={postItem}/>\n            })\n        }\n        </div>\n    </div>\n        )\n}\n\nexport default PostCardList;","// flow\nimport React, { Component } from 'react';\nimport PostCardList from '../../components/common/PostCardList';\nimport { connect } from 'react-redux';\nimport { addPost } from '../../actions';\n// type Props = {\n\n// }\nconst mapStateToProps = state => {\n    console.log('mapStateToProps',state);\n    return {\n      postList: state.postList\n    }\n  }\n  \nconst mapDispatchToProps = dispatch => {\n    return {\n        addPost: postItem => {\n            dispatch(addPost(postItem))\n        }\n    }\n}\n\nclass RecentPostCardList extends Component {\n    \n    componentDidMount() {\n        this.props.getPostList();\n    }\n    render() {\n        return (\n            <div>\n                <h2>Recent Post</h2>\n                <PostCardList postList={this.props.postList}/>            \n            </div>\n        )\n    }\n}\nRecentPostCardList = connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(RecentPostCardList)\nexport default RecentPostCardList;","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { addPost, setPostList, getPostList } from '../actions';\nimport RecentTemplate from '../components/recent/RecentTemplate/RecentTemplate';\nimport RecentPostCardList from '../containers/list/RecentPostCardList';\n// type Props = {};\n\nconst mapStateToProps = state => {\n    console.log('mapStateToProps',state);\n    return {\n      postList: state.postList\n    }\n  }\n  \nconst mapDispatchToProps = dispatch => {\n    return {\n        addPost: postItem => {\n            dispatch(addPost(postItem))\n        },\n        setPostList: postList => {\n            dispatch(setPostList(postList))\n        },\n        getPostList: () => {\n            dispatch(getPostList())\n        }\n    }\n}\n\nlet Recent = (props) => {\n    return (\n        <RecentTemplate>\n            <RecentPostCardList/>\n        </RecentTemplate>\n    )\n}\n\nRecent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(RecentPostCardList)\nexport default Recent;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\n// import { Home } from '../pages';\nimport Recent from '../pages/Recent';\n// import Popular from 'pages/Popular';\n// import Bookmark from 'pages/Bookmark';\n\nconst App = () => (\n    <Switch>\n        <Route exact path=\"/\" component={Recent}/>\n        <Route path=\"/:mode(recent|popular|bookmark)\" component={Recent} />\n    </Switch>\n)\n\nexport default App","import {\n    GET_POST_LIST,\n    RECEIVE_POST_LIST,\n    SET_POST_LIST,\n    ADD_POST,\n    TOGGLE_LIKE,\n    TOGGLE_BOOKMARK,\n    GET_FILTERED_LIST\n} from '../actions';\nimport * as postsApi from '../lib/api/posts'\n// const initialState = {\n//    postList: []\n// };\n\nconst postList = (state=[], action) => {\n    console.log(state, action)\n    switch(action.type) {\n        case SET_POST_LIST:\n            return [...action.postList]\n        case GET_POST_LIST:\n            return postsApi.readPosts(); // @TODO: 비동기 통신하도록 수정해야함\n        case GET_FILTERED_LIST:\n            return [...action.postList]\n        case RECEIVE_POST_LIST:\n            return action;\n        case ADD_POST:\n        return [\n            ...state,\n            action.postItem\n          ]\n        case TOGGLE_LIKE:\n            return state.map(postItem => {\n                if(postItem.postId === action.postId) {\n                    return {...postItem, isLiked: !postItem.isLiked}\n                }\n                return postItem;\n            })\n        case TOGGLE_BOOKMARK:\n            return state.map(postItem => {\n                if(postItem.postId === action.postId) {\n                    return {...postItem, isBookmark: !postItem.isBookmark}\n                }\n                return postItem;\n            })\n        default:\n            return state;\n    }\n}\n\nexport default postList","export const readPosts = () => {\n    // setTimeout(() => {\n        return [\n            {\n                postId: 1,\n                title: \"Jessica Jones with remarkable abilities in New York City.\" ,\n                imgSrc:\"https://mblogthumb-phinf.pstatic.net/20160414_22/shgusgnl66_14606201040627JSqU_JPEG/Marvels.Jessica.Jones.S01E05.AKA.The.Sandwich.Saved.Me.720p.NF.WEBRip.DD5.1.x264.JPG?type=w2\",\n                isLiked: true,\n                isBookmark: false,\n                viewCount: 10\n            }, {\n                postId: 2,\n                title: \"Stranger Things season 3 is comming this summer.\",\n                imgSrc:\"https://i.pinimg.com/originals/f9/60/a0/f960a0b17088c116e2b154de877b94c7.gif\",\n                isLiked: true,\n                isBookmark: true,\n                viewCount: 30\n            }, {\n                postId: 3,\n                title: \"You can find out Silver Lining.\",\n                imgSrc:\"https://i-h1.pinimg.com/564x/ef/cc/ab/efccab1f0c3192f98be0b6000b1e94e7.jpg\",\n                isLiked: true,\n                isBookmark: true,\n                viewCount: 100\n            }, {\n                postId: 4,\n                title: \"Call me by your name\",\n                imgSrc:\"https://i-h1.pinimg.com/564x/a5/ae/12/a5ae12f19bd35ef6d16bbfb3c26b5bea.jpg\",\n                isLiked: false,\n                isBookmark: true,\n                viewCount: 25\n            }, {\n                postId: 5,\n                title: \"Love or Death\",\n                imgSrc:\"https://i-h1.pinimg.com/564x/2b/e3/a4/2be3a481ee89631eb17b136ed2e122d0.jpg\",\n                isLiked: true,\n                isBookmark: false,\n                viewCount: 20\n            }, {\n                postId: 6,\n                title: \"Who is Blue??!\",\n                imgSrc:\"https://i-h1.pinimg.com/564x/1e/59/ab/1e59ab634dab7cea100b8b1e36ba79d7.jpg\",\n                isLiked: true,\n                isBookmark: true,\n                viewCount: 33\n            }\n        ]\n    // }, 300);\n}","import { SET_FILTER, filters } from '../actions';\n\nconst filter = (state = filters.SHOW_ALL, action) => {\n    switch (action.type) {\n      case SET_FILTER:\n        return action.filter\n      default:\n        return state\n    }\n  }\n\n  export default filter;","import { combineReducers } from 'redux';\nimport postList from './postList';\nimport filter from './filter';\n\nexport default combineReducers({\n    postList,\n    filter\n  })","import { createStore } from 'redux'\nimport reducers from '../reducers'\n\nconst store = createStore(reducers)\n\nexport default store;","// @flow\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './components/App';\nimport store from './store';\n\nconst Root = () => (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n);\n\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}